SELECT * FROM USER_PROFILES;
SELECT * FROM VIEWERSHIP_EXAMPLE;

  -- CHECKING THE DATE THE DATA SET STARTS AND ENDS
 SELECT MIN(RECORDDATE2)
FROM VIEWERSHIP_EXAMPLE;

SELECT MAX(RECORDDATE2)
FROM VIEWERSHIP_EXAMPLE;

-- JOINING TABLES ON FULL OUTER JOIN
SELECT 
  U.USERID,
  NAME,
  SURNAME,
  EMAIL,
  GENDER,
  RACE,
  AGE,
  PROVINCE,
  SOCIAL_MEDIA_HANDLE,
  v.channel2,CONVERT_TIMEZONE('UTC','Africa/Johannesburg',
TO_TIMESTAMP(RECORDDATE2, 'YYYY/MM/DD HH24:MI')) AS CAT_TIME,
   TO_VARCHAR(TO_TIMESTAMP(V.RECORDDATE2, 'YYYY/MM/DD HH24:MI'),'HH24:MI:SS') AS RECORD_TIME,
  TO_VARCHAR(TO_TIMESTAMP(V.RECORDDATE2, 'YYYY/MM/DD HH24:MI'),'YYYY-MM-DD') AS RECORD_DATE,
  v.duration2
FROM 
  user_profiles u
FULL OUTER JOIN 
  VIEWERSHIP_EXAMPLE v 
ON 
  u.userid = v.userid;

  drop table user_viewership;


  --- RENAMING TABLE TO USE ONE TABLE
CREATE TABLE USER_VIEWERSHIP AS
  (SELECT 
  U.USERID,
  NAME,
  SURNAME,
  EMAIL,
  GENDER,
  RACE,
  AGE,
  PROVINCE,
  SOCIAL_MEDIA_HANDLE,
  v.channel2,CONVERT_TIMEZONE('UTC','Africa/Johannesburg',
TO_TIMESTAMP(RECORDDATE2, 'YYYY/MM/DD HH24:MI')) AS CAT_TIME,
   TO_VARCHAR(TO_TIMESTAMP(V.RECORDDATE2, 'YYYY/MM/DD HH24:MI'),'HH24:MI:SS') AS RECORD_TIME,
  TO_VARCHAR(TO_TIMESTAMP(V.RECORDDATE2, 'YYYY/MM/DD HH24:MI'),'YYYY-MM-DD') AS RECORD_DATE,
  v.duration2
FROM 
  user_profiles u
FULL OUTER JOIN 
  VIEWERSHIP_EXAMPLE v 
ON 
  u.userid = v.userid);


--- EXTRACTING TIME FROM THE COLUMN THAT HAD BOTH THE DATE AND TIME AND CREATING A SEPERATE COLUMN FOR IT, WITH THE TIME DATA TYPE
ALTER TABLE USER_VIEWERSHIP ADD CAT_COPY VARCHAR;
UPDATE USER_VIEWERSHIP SET CAT_COPY = CAST (CAT_TIME AS VARCHAR);
UPDATE USER_VIEWERSHIP SET CAT_COPY = RIGHT (CAT_COPY,12);
UPDATE USER_VIEWERSHIP SET CAT_COPY = LEFT (CAT_COPY , 5);

ALTER TABLE USER_VIEWERSHIP ADD TIME TIME; 
UPDATE USER_VIEWERSHIP SET TIME = CAST (CAT_COPY AS TIME);
ALTER TABLE USER_VIEWERSHIP DROP COLUMN CAT_TIME,RECORD_TIME,CAT_COPY;

select * from user_viewership;

-- ADDING THE COLUMN RACE TO MY TABLE AS I HAD FORGOTTEN IT WHEN CREATING FIRST TABLE
CREATE or replace TABLE USER_VIEWERSHIP AS
  (SELECT 
  U.USERID,
  NAME,
  SURNAME,
  EMAIL,
  GENDER,
  RACE,
  AGE,


-- MOST VIEWS BY PROVINCE
SELECT
PROVINCE,
COUNT(*) AS VIEWER_COUNT
FROM USER_VIEWERSHIP
GROUP BY PROVINCE
ORDER BY VIEWER_COUNT DESC;

-- VIEWERSHIP BY RACE AND GENDER
SELECT PROVINCE,GENDER,
COUNT (*) AS VIEWER_COUNT
FROM USER_VIEWERSHIP
WHERE GENDER IS NOT NULL
GROUP BY GENDER,PROVINCE
ORDER BY VIEWER_COUNT DESC;

--MOST VIEWED CHANNELS
SELECT CHANNEL2,
COUNT(*) AS TOTAL_VIEWERS
FROM user_viewership
GROUP BY CHANNEL2
ORDER BY TOTAL_VIEWERS DESC
LIMIT 5;

--views by race
SELECT RACE,
count (*) AS TOTAL_VIEWERS
FROM user_viewership
GROUP BY RACE;

select*from user_viewership;

--TIME CONVERSION FROM UTC TO CAT
SELECT 
RECORDDATE2,
CONVERT_TIMEZONE('UTC','Africa/Johannesburg',
TO_TIMESTAMP(RECORDDATE2, 'YYYY/MM/DD HH24:MI')) AS CAT_TIME
FROM VIEWERSHIP_EXAMPLE;


-- time blocks ALSO  TO CHECK PEAK TIME VIEWING
select
case 
    WHEN HOUR(TO_TIMESTAMP (RECORDDATE2, 'YYYY/MM/DD HH24:MI')) BETWEEN 0 AND 5 THEN '00:00-05:59'
    WHEN HOUR(TO_TIMESTAMP (RECORDDATE2, 'YYYY/MM/DD HH24:MI')) BETWEEN 6 AND 11 THEN '06:00-11:59'
    WHEN HOUR(TO_TIMESTAMP (RECORDDATE2, 'YYYY/MM/DD HH24:MI')) BETWEEN 12 AND 17 THEN '12:00-17:59'
    ELSE '18:00-23:59'
    END AS TIME_BLOCK,
    COUNT (*) AS VIEWER_COUNT
    FROM VIEWERSHIP_EXAMPLE
    GROUP BY TIME_BLOCK
    ORDER BY VIEWER_COUNT DESC;

--- correcting table name

ALTER TABLE VIEWERSHIP_EXAMPLE
RENAME COLUMN RECORDATE2 TO RECORDDATE2
FROM VIEWERSHIP_EXAMPLE;


--PEAK HOURS PER PROVINCE
SELECT 
  u.Province,
  EXTRACT(HOUR FROM TO_TIMESTAMP(v.RecordDate2, 'YYYY/MM/DD HH24:MI')) AS view_hour,
  COUNT(*) AS view_count,
  RANK() OVER (PARTITION BY u.Province ORDER BY COUNT(*) DESC) AS rank
FROM viewership_example v
JOIN user_profiles u ON v.UserID = u.UserID
WHERE v.RecordDate2 IS NOT NULL AND u.Province IS NOT NULL
GROUP BY u.Province, view_hour
QUALIFY rank = 1
ORDER BY u.Province;


-- PEAK HOURLY VIEWERSHIP ACROSS ALL PROVINCES
SELECT 
  EXTRACT(HOUR FROM TO_TIMESTAMP(RecordDate2, 'YYYY/MM/DD HH24:MI')) AS view_hour,
  COUNT(*) AS total_views
FROM viewership_example
WHERE RecordDate2 IS NOT NULL
GROUP BY view_hour
ORDER BY total_views DESC;

-- MOST WATCHED CHANNEL BY GENDER
SELECT 
  u.Gender,
  v.Channel2,
  COUNT(*) AS view_count,
  RANK() OVER (PARTITION BY u.Gender ORDER BY COUNT(*) DESC) AS rank
FROM viewership_example v
JOIN user_profiles u ON v.UserID = u.UserID
WHERE u.Gender IS NOT NULL AND v.Channel2 IS NOT NULL
GROUP BY u.Gender, v.Channel2
QUALIFY rank <= 2
ORDER BY u.Gender;


--AGE BUCKETS

SELECT '<18' AS AGE_BUCKET, 'MINOR'  DESCRIPTION,
UNION ALL
SELECT '18-24', 'YOUTH'
UNION ALL
SELECT '25-34', 'YOUNG ADULT'
UNION ALL
SELECT '35-44', 'ADULT'
UNION ALL
SELECT '45-54', 'MIDDLE AGE'
UNION ALL
SELECT '55-64', 'SENIOR'
UNION ALL
SELECT '65+', 'PENSIONERS';




--
SELECT 
  A.UserID,
  A.Age,
  A.AGE_BUCKET,
  B.Description
FROM (
  SELECT 
    UserID,
    Age,
    CASE 
      WHEN Age < 18 THEN '<18'
      WHEN Age BETWEEN 18 AND 24 THEN '18–24'
      WHEN Age BETWEEN 25 AND 34 THEN '25–34'
      WHEN Age BETWEEN 35 AND 44 THEN '35–44'
      WHEN Age BETWEEN 45 AND 54 THEN '45–54'
      WHEN Age BETWEEN 55 AND 64 THEN '55–64'
      ELSE '65+'
    END AS AGE_BUCKET
  FROM user_profiles
) A
JOIN (
  SELECT '<18' AS AGE_BUCKET, 'MINOR' AS Description
  UNION ALL SELECT '18–24', 'YOUTH'
  UNION ALL SELECT '25–34', 'YOUNG ADULT'
  UNION ALL SELECT '35–44', 'ADULT'
  UNION ALL SELECT '45–54', 'MIDDLE AGE'
  UNION ALL SELECT '55–64', 'SENIOR'
  UNION ALL SELECT '65+', 'PENSIONERS'
) B 
ON A.AGE_BUCKET = B.AGE_BUCKET;

--MOST WATCHED CHANNEL BY AGE GROUP
SELECT 
  u.age,
  v.Channel2,
  COUNT(*) AS view_count
FROM viewership_example v
JOIN user_profiles u ON v.UserID = u.UserID
WHERE u.age IS NOT NULL AND v.Channel2 IS NOT NULL
GROUP BY u.age, v.Channel2
ORDER BY u.age, view_count DESC;


-- TOP CHANNEL WATCHED BY AGE GROUP
SELECT 
  CASE 
    WHEN u.Age < 18 THEN 'MINOR'
    WHEN u.Age BETWEEN 18 AND 24 THEN 'YOUTH'
    WHEN u.Age BETWEEN 25 AND 34 THEN 'YOUNG ADULT'
    WHEN u.Age BETWEEN 35 AND 44 THEN 'ADULT'
    WHEN u.Age BETWEEN 45 AND 54 THEN 'MIDDLE AGED'
    WHEN u.Age BETWEEN 55 AND 64 THEN 'SENIOR'
    ELSE 'PENSIONERS'
  END AS age_group,
  v.Channel2,
  COUNT(*) AS view_count,
  RANK() OVER (
    PARTITION BY 
      CASE 
        WHEN u.Age < 18 THEN 'MINOR'
        WHEN u.Age BETWEEN 18 AND 24 THEN 'YOUTH'
        WHEN u.Age BETWEEN 25 AND 34 THEN 'YOUNG ADULT'
        WHEN u.Age BETWEEN 35 AND 44 THEN 'ADULT'
        WHEN u.Age BETWEEN 45 AND 54 THEN 'MIDDLE AGED'
        WHEN u.Age BETWEEN 55 AND 64 THEN 'SENIOR'
        ELSE 'PENSIONERS'
      END 
    ORDER BY COUNT(*) DESC
  ) AS rank
FROM viewership_example v
JOIN user_profiles u ON v.UserID = u.UserID
WHERE u.Age IS NOT NULL AND v.Channel2 IS NOT NULL
GROUP BY 
  v.Channel2,
  CASE 
    WHEN u.Age < 18 THEN 'MINOR'
    WHEN u.Age BETWEEN 18 AND 24 THEN 'YOUTH'
    WHEN u.Age BETWEEN 25 AND 34 THEN 'YOUNG ADULT'
    WHEN u.Age BETWEEN 35 AND 44 THEN 'ADULT'
    WHEN u.Age BETWEEN 45 AND 54 THEN 'MIDDLE AGED'
    WHEN u.Age BETWEEN 55 AND 64 THEN 'SENIOR'
    ELSE 'PENSIONERS'
  END
QUALIFY rank = 1
ORDER BY age_group;

--USER AND USAGE TRENDS

select a.userid,gender,race,age,province,channel2,recorddate2,duration2
from user_profiles as a
inner join viewership_example as b
on b.userid = a.userid;


---TOP 10 MOST VIEWED CHANNELS
SELECT  CHANNEL2,COUNT (*) AS VIEWER_COUNT
FROM user_viewership
WHERE CHANNEL2 IS NOT NULL
GROUP BY CHANNEL2
ORDER BY VIEWER_COUNT DESC
LIMIT 10;


-- viewrship by age bucket
select
case
     WHEN AGE <= 18 THEN 'MINOR'
    WHEN AGE BETWEEN 18 AND 24 THEN 'YOUTH'
    WHEN AGE BETWEEN 25 AND 34 THEN 'YOUNG ADULT'
    WHEN AGE BETWEEN 35 AND 44 THEN 'ADULT'
    WHEN AGE BETWEEN 45 AND 54 THEN 'MIDDLE AGED'
    WHEN AGE BETWEEN 55 AND 64 THEN 'SENIOR'
    ELSE 'PENSIONERS'
    END AS AGE_BUCKET,
    COUNT (*) AS VIEWERS
    FROM USER_PROFILES
    GROUP BY AGE_BUCKET
    ORDER BY VIEWERS DESC;

    -- CHECKING THE DATE THE DATA SET INFO STARTS AND ENDS
    SELECT MIN(RECORDDATE2)
    FROM VIEWERSHIP_EXAMPLE;

     SELECT MAX(RECORDDATE2)
    FROM VIEWERSHIP_EXAMPLE;

